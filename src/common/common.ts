// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "common/common.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.GetPaginateParams
 */
export interface GetPaginateParams {
    /**
     * @generated from protobuf field: int32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message common.PaginateMeta
 */
export interface PaginateMeta {
    /**
     * @generated from protobuf field: int32 per_page = 1
     */
    perPage: number;
    /**
     * @generated from protobuf field: int32 current_page = 2
     */
    currentPage: number;
    /**
     * @generated from protobuf field: int32 total = 3
     */
    total: number;
    /**
     * @generated from protobuf field: int32 total_pages = 4
     */
    totalPages: number;
    /**
     * @generated from protobuf field: bool has_next_page = 5
     */
    hasNextPage: boolean;
    /**
     * @generated from protobuf field: bool has_previous_page = 6
     */
    hasPreviousPage: boolean;
}
/**
 * @generated from protobuf message common.GetOffsetParams
 */
export interface GetOffsetParams {
    /**
     * @generated from protobuf field: int32 offset = 1
     */
    offset: number;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message common.Status
 */
export interface Status {
    /**
     * @generated from protobuf field: bool status = 1
     */
    status: boolean;
}
/**
 * @generated from protobuf message common.ValidationFieldError
 */
export interface ValidationFieldError {
    /**
     * @generated from protobuf field: string field = 1
     */
    field: string;
    /**
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
/**
 * @generated from protobuf message common.ValidationErrors
 */
export interface ValidationErrors {
    /**
     * @generated from protobuf field: repeated common.ValidationFieldError errors = 1
     */
    errors: ValidationFieldError[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPaginateParams$Type extends MessageType<GetPaginateParams> {
    constructor() {
        super("common.GetPaginateParams", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPaginateParams>): GetPaginateParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetPaginateParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPaginateParams): GetPaginateParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPaginateParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.GetPaginateParams
 */
export const GetPaginateParams = new GetPaginateParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginateMeta$Type extends MessageType<PaginateMeta> {
    constructor() {
        super("common.PaginateMeta", [
            { no: 1, name: "per_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "current_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "total_pages", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "has_next_page", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "has_previous_page", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PaginateMeta>): PaginateMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.perPage = 0;
        message.currentPage = 0;
        message.total = 0;
        message.totalPages = 0;
        message.hasNextPage = false;
        message.hasPreviousPage = false;
        if (value !== undefined)
            reflectionMergePartial<PaginateMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginateMeta): PaginateMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 per_page */ 1:
                    message.perPage = reader.int32();
                    break;
                case /* int32 current_page */ 2:
                    message.currentPage = reader.int32();
                    break;
                case /* int32 total */ 3:
                    message.total = reader.int32();
                    break;
                case /* int32 total_pages */ 4:
                    message.totalPages = reader.int32();
                    break;
                case /* bool has_next_page */ 5:
                    message.hasNextPage = reader.bool();
                    break;
                case /* bool has_previous_page */ 6:
                    message.hasPreviousPage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginateMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 per_page = 1; */
        if (message.perPage !== 0)
            writer.tag(1, WireType.Varint).int32(message.perPage);
        /* int32 current_page = 2; */
        if (message.currentPage !== 0)
            writer.tag(2, WireType.Varint).int32(message.currentPage);
        /* int32 total = 3; */
        if (message.total !== 0)
            writer.tag(3, WireType.Varint).int32(message.total);
        /* int32 total_pages = 4; */
        if (message.totalPages !== 0)
            writer.tag(4, WireType.Varint).int32(message.totalPages);
        /* bool has_next_page = 5; */
        if (message.hasNextPage !== false)
            writer.tag(5, WireType.Varint).bool(message.hasNextPage);
        /* bool has_previous_page = 6; */
        if (message.hasPreviousPage !== false)
            writer.tag(6, WireType.Varint).bool(message.hasPreviousPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.PaginateMeta
 */
export const PaginateMeta = new PaginateMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOffsetParams$Type extends MessageType<GetOffsetParams> {
    constructor() {
        super("common.GetOffsetParams", [
            { no: 1, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetOffsetParams>): GetOffsetParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.offset = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetOffsetParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOffsetParams): GetOffsetParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 offset */ 1:
                    message.offset = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOffsetParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Varint).int32(message.offset);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.GetOffsetParams
 */
export const GetOffsetParams = new GetOffsetParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Status$Type extends MessageType<Status> {
    constructor() {
        super("common.Status", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Status>): Status {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Status): Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.Status
 */
export const Status = new Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidationFieldError$Type extends MessageType<ValidationFieldError> {
    constructor() {
        super("common.ValidationFieldError", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidationFieldError>): ValidationFieldError {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ValidationFieldError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidationFieldError): ValidationFieldError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidationFieldError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.ValidationFieldError
 */
export const ValidationFieldError = new ValidationFieldError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidationErrors$Type extends MessageType<ValidationErrors> {
    constructor() {
        super("common.ValidationErrors", [
            { no: 1, name: "errors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ValidationFieldError }
        ]);
    }
    create(value?: PartialMessage<ValidationErrors>): ValidationErrors {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.errors = [];
        if (value !== undefined)
            reflectionMergePartial<ValidationErrors>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidationErrors): ValidationErrors {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated common.ValidationFieldError errors */ 1:
                    message.errors.push(ValidationFieldError.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidationErrors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated common.ValidationFieldError errors = 1; */
        for (let i = 0; i < message.errors.length; i++)
            ValidationFieldError.internalBinaryWrite(message.errors[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.ValidationErrors
 */
export const ValidationErrors = new ValidationErrors$Type();
