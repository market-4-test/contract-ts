// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "catalog/categories.proto" (package "catalog", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GetOffsetParams } from "../common/common";
import { PaginateMeta } from "../common/common";
import { GetPaginateParams } from "../common/common";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message catalog.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional int32 parent_id = 2
     */
    parentId?: number;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 4
     */
    slug: string;
    /**
     * @generated from protobuf field: bool is_active = 5
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: int32 order_sort = 6
     */
    orderSort: number;
    /**
     * @generated from protobuf field: optional bytes image_uuid = 7
     */
    imageUuid?: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 8
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 9
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message catalog.CategoryShort
 */
export interface CategoryShort {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 3
     */
    slug: string;
    /**
     * @generated from protobuf field: optional bytes image_uuid = 4
     */
    imageUuid?: Uint8Array;
}
/**
 * @generated from protobuf message catalog.UpsertCategoryParams
 */
export interface UpsertCategoryParams {
    /**
     * @generated from protobuf field: optional int32 parent_id = 1
     */
    parentId?: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 3
     */
    slug: string;
    /**
     * @generated from protobuf field: bool is_active = 4
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: optional bytes image_uuid = 5
     */
    imageUuid?: Uint8Array;
}
/**
 * @generated from protobuf message catalog.CreateCategoryParams
 */
export interface CreateCategoryParams {
    /**
     * @generated from protobuf field: catalog.UpsertCategoryParams data = 1
     */
    data?: UpsertCategoryParams;
}
/**
 * @generated from protobuf message catalog.UpdateCategoryParams
 */
export interface UpdateCategoryParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: catalog.UpsertCategoryParams data = 2
     */
    data?: UpsertCategoryParams;
}
/**
 * @generated from protobuf message catalog.UpdateActiveToCategories
 */
export interface UpdateActiveToCategories {
    /**
     * @generated from protobuf field: repeated int32 ids = 1
     */
    ids: number[];
    /**
     * @generated from protobuf field: bool is_active = 2
     */
    isActive: boolean;
}
/**
 * @generated from protobuf message catalog.UpdateParentToCategories
 */
export interface UpdateParentToCategories {
    /**
     * @generated from protobuf field: repeated bytes sub_ids = 1
     */
    subIds: Uint8Array[];
    /**
     * @generated from protobuf field: bytes parent_ids = 2
     */
    parentIds: Uint8Array;
}
/**
 * @generated from protobuf message catalog.CheckAvailableSlugParams
 */
export interface CheckAvailableSlugParams {
    /**
     * @generated from protobuf field: string slug = 1
     */
    slug: string;
}
/**
 * @generated from protobuf message catalog.SetImageToCategoryParams
 */
export interface SetImageToCategoryParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: bytes image_uuid = 2
     */
    imageUuid: Uint8Array;
}
/**
 * @generated from protobuf message catalog.OrderSortCategory
 */
export interface OrderSortCategory {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: int32 order_sort = 2
     */
    orderSort: number;
}
/**
 * @generated from protobuf message catalog.UpdateOrderSortToCategoriesParams
 */
export interface UpdateOrderSortToCategoriesParams {
    /**
     * @generated from protobuf field: repeated catalog.OrderSortCategory list = 1
     */
    list: OrderSortCategory[];
}
/**
 * @generated from protobuf message catalog.GetCategoriesPaginateParams
 */
export interface GetCategoriesPaginateParams {
    /**
     * @generated from protobuf field: common.GetPaginateParams params = 1
     */
    params?: GetPaginateParams;
}
/**
 * @generated from protobuf message catalog.GetCategoriesPaginateResponse
 */
export interface GetCategoriesPaginateResponse {
    /**
     * @generated from protobuf field: repeated catalog.Category list = 1
     */
    list: Category[];
    /**
     * @generated from protobuf field: common.PaginateMeta meta = 2
     */
    meta?: PaginateMeta;
}
/**
 * @generated from protobuf message catalog.GetCategoriesShortPaginateResponse
 */
export interface GetCategoriesShortPaginateResponse {
    /**
     * @generated from protobuf field: repeated catalog.CategoryShort list = 1
     */
    list: CategoryShort[];
    /**
     * @generated from protobuf field: common.PaginateMeta meta = 2
     */
    meta?: PaginateMeta;
}
/**
 * @generated from protobuf message catalog.GetCategoriesOffsetParams
 */
export interface GetCategoriesOffsetParams {
    /**
     * @generated from protobuf field: common.GetOffsetParams params = 1
     */
    params?: GetOffsetParams;
}
/**
 * @generated from protobuf message catalog.GetCategoriesOffsetResponse
 */
export interface GetCategoriesOffsetResponse {
    /**
     * @generated from protobuf field: repeated catalog.Category list = 1
     */
    list: Category[];
}
/**
 * @generated from protobuf message catalog.GetCategoriesShortOffsetParams
 */
export interface GetCategoriesShortOffsetParams {
    /**
     * @generated from protobuf field: common.GetOffsetParams params = 1
     */
    params?: GetOffsetParams;
}
/**
 * @generated from protobuf message catalog.GetCategoriesShortOffsetResponse
 */
export interface GetCategoriesShortOffsetResponse {
    /**
     * @generated from protobuf field: repeated catalog.CategoryShort list = 1
     */
    list: CategoryShort[];
}
/**
 * @generated from protobuf message catalog.GetCategoryByIdParams
 */
export interface GetCategoryByIdParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message catalog.DeleteCategoriesParams
 */
export interface DeleteCategoriesParams {
    /**
     * @generated from protobuf field: int32 category_ids = 1
     */
    categoryIds: number;
}
/**
 * @generated from protobuf message catalog.StatusCategory
 */
export interface StatusCategory {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: bool status = 2
     */
    status: boolean;
}
/**
 * @generated from protobuf message catalog.DeleteCategoriesResponse
 */
export interface DeleteCategoriesResponse {
    /**
     * @generated from protobuf field: repeated catalog.StatusCategory list = 1
     */
    list: StatusCategory[];
}
/**
 * @generated from protobuf message catalog.UpdateOrderSortToCategoriesResponse
 */
export interface UpdateOrderSortToCategoriesResponse {
    /**
     * @generated from protobuf field: repeated catalog.StatusCategory list = 1
     */
    list: StatusCategory[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("catalog.Category", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "order_sort", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "image_uuid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 9, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.slug = "";
        message.isActive = false;
        message.orderSort = 0;
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional int32 parent_id */ 2:
                    message.parentId = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string slug */ 4:
                    message.slug = reader.string();
                    break;
                case /* bool is_active */ 5:
                    message.isActive = reader.bool();
                    break;
                case /* int32 order_sort */ 6:
                    message.orderSort = reader.int32();
                    break;
                case /* optional bytes image_uuid */ 7:
                    message.imageUuid = reader.bytes();
                    break;
                case /* google.protobuf.Timestamp created_at */ 8:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 9:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional int32 parent_id = 2; */
        if (message.parentId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.parentId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string slug = 4; */
        if (message.slug !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.slug);
        /* bool is_active = 5; */
        if (message.isActive !== false)
            writer.tag(5, WireType.Varint).bool(message.isActive);
        /* int32 order_sort = 6; */
        if (message.orderSort !== 0)
            writer.tag(6, WireType.Varint).int32(message.orderSort);
        /* optional bytes image_uuid = 7; */
        if (message.imageUuid !== undefined)
            writer.tag(7, WireType.LengthDelimited).bytes(message.imageUuid);
        /* google.protobuf.Timestamp created_at = 8; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 9; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryShort$Type extends MessageType<CategoryShort> {
    constructor() {
        super("catalog.CategoryShort", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "image_uuid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryShort>): CategoryShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.slug = "";
        if (value !== undefined)
            reflectionMergePartial<CategoryShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryShort): CategoryShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string slug */ 3:
                    message.slug = reader.string();
                    break;
                case /* optional bytes image_uuid */ 4:
                    message.imageUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string slug = 3; */
        if (message.slug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.slug);
        /* optional bytes image_uuid = 4; */
        if (message.imageUuid !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.imageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.CategoryShort
 */
export const CategoryShort = new CategoryShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertCategoryParams$Type extends MessageType<UpsertCategoryParams> {
    constructor() {
        super("catalog.UpsertCategoryParams", [
            { no: 1, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "image_uuid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertCategoryParams>): UpsertCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.slug = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<UpsertCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertCategoryParams): UpsertCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 parent_id */ 1:
                    message.parentId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string slug */ 3:
                    message.slug = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                case /* optional bytes image_uuid */ 5:
                    message.imageUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 parent_id = 1; */
        if (message.parentId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.parentId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string slug = 3; */
        if (message.slug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.slug);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        /* optional bytes image_uuid = 5; */
        if (message.imageUuid !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.imageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpsertCategoryParams
 */
export const UpsertCategoryParams = new UpsertCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCategoryParams$Type extends MessageType<CreateCategoryParams> {
    constructor() {
        super("catalog.CreateCategoryParams", [
            { no: 1, name: "data", kind: "message", T: () => UpsertCategoryParams }
        ]);
    }
    create(value?: PartialMessage<CreateCategoryParams>): CreateCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCategoryParams): CreateCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* catalog.UpsertCategoryParams data */ 1:
                    message.data = UpsertCategoryParams.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* catalog.UpsertCategoryParams data = 1; */
        if (message.data)
            UpsertCategoryParams.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.CreateCategoryParams
 */
export const CreateCategoryParams = new CreateCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCategoryParams$Type extends MessageType<UpdateCategoryParams> {
    constructor() {
        super("catalog.UpdateCategoryParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "message", T: () => UpsertCategoryParams }
        ]);
    }
    create(value?: PartialMessage<UpdateCategoryParams>): UpdateCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCategoryParams): UpdateCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* catalog.UpsertCategoryParams data */ 2:
                    message.data = UpsertCategoryParams.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* catalog.UpsertCategoryParams data = 2; */
        if (message.data)
            UpsertCategoryParams.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateCategoryParams
 */
export const UpdateCategoryParams = new UpdateCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateActiveToCategories$Type extends MessageType<UpdateActiveToCategories> {
    constructor() {
        super("catalog.UpdateActiveToCategories", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateActiveToCategories>): UpdateActiveToCategories {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateActiveToCategories>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateActiveToCategories): UpdateActiveToCategories {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.int32());
                    else
                        message.ids.push(reader.int32());
                    break;
                case /* bool is_active */ 2:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateActiveToCategories, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 ids = 1; */
        if (message.ids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.int32(message.ids[i]);
            writer.join();
        }
        /* bool is_active = 2; */
        if (message.isActive !== false)
            writer.tag(2, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateActiveToCategories
 */
export const UpdateActiveToCategories = new UpdateActiveToCategories$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateParentToCategories$Type extends MessageType<UpdateParentToCategories> {
    constructor() {
        super("catalog.UpdateParentToCategories", [
            { no: 1, name: "sub_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "parent_ids", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateParentToCategories>): UpdateParentToCategories {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subIds = [];
        message.parentIds = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UpdateParentToCategories>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateParentToCategories): UpdateParentToCategories {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes sub_ids */ 1:
                    message.subIds.push(reader.bytes());
                    break;
                case /* bytes parent_ids */ 2:
                    message.parentIds = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateParentToCategories, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes sub_ids = 1; */
        for (let i = 0; i < message.subIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.subIds[i]);
        /* bytes parent_ids = 2; */
        if (message.parentIds.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.parentIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateParentToCategories
 */
export const UpdateParentToCategories = new UpdateParentToCategories$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckAvailableSlugParams$Type extends MessageType<CheckAvailableSlugParams> {
    constructor() {
        super("catalog.CheckAvailableSlugParams", [
            { no: 1, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckAvailableSlugParams>): CheckAvailableSlugParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slug = "";
        if (value !== undefined)
            reflectionMergePartial<CheckAvailableSlugParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckAvailableSlugParams): CheckAvailableSlugParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slug */ 1:
                    message.slug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckAvailableSlugParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slug = 1; */
        if (message.slug !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.slug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.CheckAvailableSlugParams
 */
export const CheckAvailableSlugParams = new CheckAvailableSlugParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetImageToCategoryParams$Type extends MessageType<SetImageToCategoryParams> {
    constructor() {
        super("catalog.SetImageToCategoryParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "image_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SetImageToCategoryParams>): SetImageToCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.imageUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SetImageToCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetImageToCategoryParams): SetImageToCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* bytes image_uuid */ 2:
                    message.imageUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetImageToCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* bytes image_uuid = 2; */
        if (message.imageUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.imageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.SetImageToCategoryParams
 */
export const SetImageToCategoryParams = new SetImageToCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderSortCategory$Type extends MessageType<OrderSortCategory> {
    constructor() {
        super("catalog.OrderSortCategory", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "order_sort", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OrderSortCategory>): OrderSortCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.orderSort = 0;
        if (value !== undefined)
            reflectionMergePartial<OrderSortCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderSortCategory): OrderSortCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 order_sort */ 2:
                    message.orderSort = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderSortCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 order_sort = 2; */
        if (message.orderSort !== 0)
            writer.tag(2, WireType.Varint).int32(message.orderSort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.OrderSortCategory
 */
export const OrderSortCategory = new OrderSortCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderSortToCategoriesParams$Type extends MessageType<UpdateOrderSortToCategoriesParams> {
    constructor() {
        super("catalog.UpdateOrderSortToCategoriesParams", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderSortCategory }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderSortToCategoriesParams>): UpdateOrderSortToCategoriesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderSortToCategoriesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderSortToCategoriesParams): UpdateOrderSortToCategoriesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.OrderSortCategory list */ 1:
                    message.list.push(OrderSortCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderSortToCategoriesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.OrderSortCategory list = 1; */
        for (let i = 0; i < message.list.length; i++)
            OrderSortCategory.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateOrderSortToCategoriesParams
 */
export const UpdateOrderSortToCategoriesParams = new UpdateOrderSortToCategoriesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesPaginateParams$Type extends MessageType<GetCategoriesPaginateParams> {
    constructor() {
        super("catalog.GetCategoriesPaginateParams", [
            { no: 1, name: "params", kind: "message", T: () => GetPaginateParams }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesPaginateParams>): GetCategoriesPaginateParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesPaginateParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesPaginateParams): GetCategoriesPaginateParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetPaginateParams params */ 1:
                    message.params = GetPaginateParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesPaginateParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetPaginateParams params = 1; */
        if (message.params)
            GetPaginateParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesPaginateParams
 */
export const GetCategoriesPaginateParams = new GetCategoriesPaginateParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesPaginateResponse$Type extends MessageType<GetCategoriesPaginateResponse> {
    constructor() {
        super("catalog.GetCategoriesPaginateResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Category },
            { no: 2, name: "meta", kind: "message", T: () => PaginateMeta }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesPaginateResponse>): GetCategoriesPaginateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesPaginateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesPaginateResponse): GetCategoriesPaginateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.Category list */ 1:
                    message.list.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PaginateMeta meta */ 2:
                    message.meta = PaginateMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesPaginateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.Category list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Category.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginateMeta meta = 2; */
        if (message.meta)
            PaginateMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesPaginateResponse
 */
export const GetCategoriesPaginateResponse = new GetCategoriesPaginateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesShortPaginateResponse$Type extends MessageType<GetCategoriesShortPaginateResponse> {
    constructor() {
        super("catalog.GetCategoriesShortPaginateResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CategoryShort },
            { no: 2, name: "meta", kind: "message", T: () => PaginateMeta }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesShortPaginateResponse>): GetCategoriesShortPaginateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesShortPaginateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesShortPaginateResponse): GetCategoriesShortPaginateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.CategoryShort list */ 1:
                    message.list.push(CategoryShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PaginateMeta meta */ 2:
                    message.meta = PaginateMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesShortPaginateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.CategoryShort list = 1; */
        for (let i = 0; i < message.list.length; i++)
            CategoryShort.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginateMeta meta = 2; */
        if (message.meta)
            PaginateMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesShortPaginateResponse
 */
export const GetCategoriesShortPaginateResponse = new GetCategoriesShortPaginateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesOffsetParams$Type extends MessageType<GetCategoriesOffsetParams> {
    constructor() {
        super("catalog.GetCategoriesOffsetParams", [
            { no: 1, name: "params", kind: "message", T: () => GetOffsetParams }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesOffsetParams>): GetCategoriesOffsetParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesOffsetParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesOffsetParams): GetCategoriesOffsetParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetOffsetParams params */ 1:
                    message.params = GetOffsetParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesOffsetParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetOffsetParams params = 1; */
        if (message.params)
            GetOffsetParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesOffsetParams
 */
export const GetCategoriesOffsetParams = new GetCategoriesOffsetParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesOffsetResponse$Type extends MessageType<GetCategoriesOffsetResponse> {
    constructor() {
        super("catalog.GetCategoriesOffsetResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesOffsetResponse>): GetCategoriesOffsetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesOffsetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesOffsetResponse): GetCategoriesOffsetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.Category list */ 1:
                    message.list.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesOffsetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.Category list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Category.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesOffsetResponse
 */
export const GetCategoriesOffsetResponse = new GetCategoriesOffsetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesShortOffsetParams$Type extends MessageType<GetCategoriesShortOffsetParams> {
    constructor() {
        super("catalog.GetCategoriesShortOffsetParams", [
            { no: 1, name: "params", kind: "message", T: () => GetOffsetParams }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesShortOffsetParams>): GetCategoriesShortOffsetParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesShortOffsetParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesShortOffsetParams): GetCategoriesShortOffsetParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetOffsetParams params */ 1:
                    message.params = GetOffsetParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesShortOffsetParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetOffsetParams params = 1; */
        if (message.params)
            GetOffsetParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesShortOffsetParams
 */
export const GetCategoriesShortOffsetParams = new GetCategoriesShortOffsetParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesShortOffsetResponse$Type extends MessageType<GetCategoriesShortOffsetResponse> {
    constructor() {
        super("catalog.GetCategoriesShortOffsetResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CategoryShort }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesShortOffsetResponse>): GetCategoriesShortOffsetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesShortOffsetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesShortOffsetResponse): GetCategoriesShortOffsetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.CategoryShort list */ 1:
                    message.list.push(CategoryShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesShortOffsetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.CategoryShort list = 1; */
        for (let i = 0; i < message.list.length; i++)
            CategoryShort.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoriesShortOffsetResponse
 */
export const GetCategoriesShortOffsetResponse = new GetCategoriesShortOffsetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryByIdParams$Type extends MessageType<GetCategoryByIdParams> {
    constructor() {
        super("catalog.GetCategoryByIdParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCategoryByIdParams>): GetCategoryByIdParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCategoryByIdParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryByIdParams): GetCategoryByIdParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryByIdParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetCategoryByIdParams
 */
export const GetCategoryByIdParams = new GetCategoryByIdParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCategoriesParams$Type extends MessageType<DeleteCategoriesParams> {
    constructor() {
        super("catalog.DeleteCategoriesParams", [
            { no: 1, name: "category_ids", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCategoriesParams>): DeleteCategoriesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categoryIds = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteCategoriesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCategoriesParams): DeleteCategoriesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 category_ids */ 1:
                    message.categoryIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCategoriesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 category_ids = 1; */
        if (message.categoryIds !== 0)
            writer.tag(1, WireType.Varint).int32(message.categoryIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.DeleteCategoriesParams
 */
export const DeleteCategoriesParams = new DeleteCategoriesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusCategory$Type extends MessageType<StatusCategory> {
    constructor() {
        super("catalog.StatusCategory", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StatusCategory>): StatusCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<StatusCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusCategory): StatusCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* bool status */ 2:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* bool status = 2; */
        if (message.status !== false)
            writer.tag(2, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.StatusCategory
 */
export const StatusCategory = new StatusCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCategoriesResponse$Type extends MessageType<DeleteCategoriesResponse> {
    constructor() {
        super("catalog.DeleteCategoriesResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => StatusCategory }
        ]);
    }
    create(value?: PartialMessage<DeleteCategoriesResponse>): DeleteCategoriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCategoriesResponse): DeleteCategoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.StatusCategory list */ 1:
                    message.list.push(StatusCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.StatusCategory list = 1; */
        for (let i = 0; i < message.list.length; i++)
            StatusCategory.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.DeleteCategoriesResponse
 */
export const DeleteCategoriesResponse = new DeleteCategoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateOrderSortToCategoriesResponse$Type extends MessageType<UpdateOrderSortToCategoriesResponse> {
    constructor() {
        super("catalog.UpdateOrderSortToCategoriesResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => StatusCategory }
        ]);
    }
    create(value?: PartialMessage<UpdateOrderSortToCategoriesResponse>): UpdateOrderSortToCategoriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateOrderSortToCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateOrderSortToCategoriesResponse): UpdateOrderSortToCategoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.StatusCategory list */ 1:
                    message.list.push(StatusCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateOrderSortToCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.StatusCategory list = 1; */
        for (let i = 0; i < message.list.length; i++)
            StatusCategory.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateOrderSortToCategoriesResponse
 */
export const UpdateOrderSortToCategoriesResponse = new UpdateOrderSortToCategoriesResponse$Type();
