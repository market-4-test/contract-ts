// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "catalog/brands.proto" (package "catalog", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GetOffsetParams } from "../common/common";
import { PaginateMeta } from "../common/common";
import { GetPaginateParams } from "../common/common";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message catalog.Brand
 */
export interface Brand {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 3
     */
    slug: string;
    /**
     * @generated from protobuf field: bool is_active = 4
     */
    isActive: boolean;
    /**
     *  optional bytes image_uuid = 5;
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message catalog.BrandShort
 */
export interface BrandShort {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 3
     */
    slug: string;
}
/**
 * @generated from protobuf message catalog.UpsertBrandParams
 */
export interface UpsertBrandParams {
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 3
     */
    slug: string;
    /**
     * @generated from protobuf field: bool is_active = 4
     */
    isActive: boolean; //  optional bytes image_uuid = 5;
}
/**
 * @generated from protobuf message catalog.CreateBrandParams
 */
export interface CreateBrandParams {
    /**
     * @generated from protobuf field: catalog.UpsertBrandParams data = 1
     */
    data?: UpsertBrandParams;
}
/**
 * @generated from protobuf message catalog.UpdateBrandParams
 */
export interface UpdateBrandParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: catalog.UpsertBrandParams data = 2
     */
    data?: UpsertBrandParams;
}
/**
 * @generated from protobuf message catalog.UpdateActiveToBrands
 */
export interface UpdateActiveToBrands {
    /**
     * @generated from protobuf field: repeated int32 ids = 1
     */
    ids: number[];
    /**
     * @generated from protobuf field: bool is_active = 2
     */
    isActive: boolean;
}
// message UpdateImageToBrand {
//  int32 id = 1;
//  bytes image_uuid = 5;
// }

/**
 * @generated from protobuf message catalog.GetBrandsPaginateParams
 */
export interface GetBrandsPaginateParams {
    /**
     * @generated from protobuf field: common.GetPaginateParams params = 1
     */
    params?: GetPaginateParams;
}
/**
 * @generated from protobuf message catalog.GetBrandsPaginateResponse
 */
export interface GetBrandsPaginateResponse {
    /**
     * @generated from protobuf field: repeated catalog.Brand list = 1
     */
    list: Brand[];
    /**
     * @generated from protobuf field: common.PaginateMeta meta = 2
     */
    meta?: PaginateMeta;
}
/**
 * @generated from protobuf message catalog.GetBrandsShortPaginateResponse
 */
export interface GetBrandsShortPaginateResponse {
    /**
     * @generated from protobuf field: repeated catalog.BrandShort list = 1
     */
    list: BrandShort[];
    /**
     * @generated from protobuf field: common.PaginateMeta meta = 2
     */
    meta?: PaginateMeta;
}
/**
 * @generated from protobuf message catalog.GetOffsetBrandsParams
 */
export interface GetOffsetBrandsParams {
    /**
     * @generated from protobuf field: common.GetOffsetParams params = 1
     */
    params?: GetOffsetParams;
}
/**
 * @generated from protobuf message catalog.GetOffsetBrandsShortParams
 */
export interface GetOffsetBrandsShortParams {
    /**
     * @generated from protobuf field: common.GetOffsetParams params = 1
     */
    params?: GetOffsetParams;
}
/**
 * @generated from protobuf message catalog.GetBrandsOffsetResponse
 */
export interface GetBrandsOffsetResponse {
    /**
     * @generated from protobuf field: repeated catalog.Brand list = 1
     */
    list: Brand[];
}
/**
 * @generated from protobuf message catalog.GetBrandsShortOffsetResponse
 */
export interface GetBrandsShortOffsetResponse {
    /**
     * @generated from protobuf field: repeated catalog.BrandShort list = 1
     */
    list: BrandShort[];
}
/**
 * @generated from protobuf message catalog.GetBrandByIdParams
 */
export interface GetBrandByIdParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message catalog.StatusBrand
 */
export interface StatusBrand {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: bool status = 2
     */
    status: boolean;
}
/**
 * @generated from protobuf message catalog.DeleteBrandsParams
 */
export interface DeleteBrandsParams {
    /**
     * @generated from protobuf field: repeated int32 ids = 1
     */
    ids: number[];
}
/**
 * @generated from protobuf message catalog.DeleteBrandsResponse
 */
export interface DeleteBrandsResponse {
    /**
     * @generated from protobuf field: catalog.StatusBrand list = 1
     */
    list?: StatusBrand;
}
// @generated message type with reflection information, may provide speed optimized methods
class Brand$Type extends MessageType<Brand> {
    constructor() {
        super("catalog.Brand", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Brand>): Brand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.slug = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<Brand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brand): Brand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string slug */ 3:
                    message.slug = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string slug = 3; */
        if (message.slug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.slug);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.Brand
 */
export const Brand = new Brand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BrandShort$Type extends MessageType<BrandShort> {
    constructor() {
        super("catalog.BrandShort", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BrandShort>): BrandShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.slug = "";
        if (value !== undefined)
            reflectionMergePartial<BrandShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrandShort): BrandShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string slug */ 3:
                    message.slug = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrandShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string slug = 3; */
        if (message.slug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.slug);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.BrandShort
 */
export const BrandShort = new BrandShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertBrandParams$Type extends MessageType<UpsertBrandParams> {
    constructor() {
        super("catalog.UpsertBrandParams", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertBrandParams>): UpsertBrandParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.slug = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<UpsertBrandParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertBrandParams): UpsertBrandParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string slug */ 3:
                    message.slug = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertBrandParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string slug = 3; */
        if (message.slug !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.slug);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpsertBrandParams
 */
export const UpsertBrandParams = new UpsertBrandParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBrandParams$Type extends MessageType<CreateBrandParams> {
    constructor() {
        super("catalog.CreateBrandParams", [
            { no: 1, name: "data", kind: "message", T: () => UpsertBrandParams }
        ]);
    }
    create(value?: PartialMessage<CreateBrandParams>): CreateBrandParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateBrandParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBrandParams): CreateBrandParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* catalog.UpsertBrandParams data */ 1:
                    message.data = UpsertBrandParams.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBrandParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* catalog.UpsertBrandParams data = 1; */
        if (message.data)
            UpsertBrandParams.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.CreateBrandParams
 */
export const CreateBrandParams = new CreateBrandParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBrandParams$Type extends MessageType<UpdateBrandParams> {
    constructor() {
        super("catalog.UpdateBrandParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "message", T: () => UpsertBrandParams }
        ]);
    }
    create(value?: PartialMessage<UpdateBrandParams>): UpdateBrandParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateBrandParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBrandParams): UpdateBrandParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* catalog.UpsertBrandParams data */ 2:
                    message.data = UpsertBrandParams.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBrandParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* catalog.UpsertBrandParams data = 2; */
        if (message.data)
            UpsertBrandParams.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateBrandParams
 */
export const UpdateBrandParams = new UpdateBrandParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateActiveToBrands$Type extends MessageType<UpdateActiveToBrands> {
    constructor() {
        super("catalog.UpdateActiveToBrands", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateActiveToBrands>): UpdateActiveToBrands {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateActiveToBrands>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateActiveToBrands): UpdateActiveToBrands {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.int32());
                    else
                        message.ids.push(reader.int32());
                    break;
                case /* bool is_active */ 2:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateActiveToBrands, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 ids = 1; */
        if (message.ids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.int32(message.ids[i]);
            writer.join();
        }
        /* bool is_active = 2; */
        if (message.isActive !== false)
            writer.tag(2, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.UpdateActiveToBrands
 */
export const UpdateActiveToBrands = new UpdateActiveToBrands$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandsPaginateParams$Type extends MessageType<GetBrandsPaginateParams> {
    constructor() {
        super("catalog.GetBrandsPaginateParams", [
            { no: 1, name: "params", kind: "message", T: () => GetPaginateParams }
        ]);
    }
    create(value?: PartialMessage<GetBrandsPaginateParams>): GetBrandsPaginateParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBrandsPaginateParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandsPaginateParams): GetBrandsPaginateParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetPaginateParams params */ 1:
                    message.params = GetPaginateParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandsPaginateParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetPaginateParams params = 1; */
        if (message.params)
            GetPaginateParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandsPaginateParams
 */
export const GetBrandsPaginateParams = new GetBrandsPaginateParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandsPaginateResponse$Type extends MessageType<GetBrandsPaginateResponse> {
    constructor() {
        super("catalog.GetBrandsPaginateResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Brand },
            { no: 2, name: "meta", kind: "message", T: () => PaginateMeta }
        ]);
    }
    create(value?: PartialMessage<GetBrandsPaginateResponse>): GetBrandsPaginateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrandsPaginateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandsPaginateResponse): GetBrandsPaginateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.Brand list */ 1:
                    message.list.push(Brand.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PaginateMeta meta */ 2:
                    message.meta = PaginateMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandsPaginateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.Brand list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Brand.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginateMeta meta = 2; */
        if (message.meta)
            PaginateMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandsPaginateResponse
 */
export const GetBrandsPaginateResponse = new GetBrandsPaginateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandsShortPaginateResponse$Type extends MessageType<GetBrandsShortPaginateResponse> {
    constructor() {
        super("catalog.GetBrandsShortPaginateResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BrandShort },
            { no: 2, name: "meta", kind: "message", T: () => PaginateMeta }
        ]);
    }
    create(value?: PartialMessage<GetBrandsShortPaginateResponse>): GetBrandsShortPaginateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrandsShortPaginateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandsShortPaginateResponse): GetBrandsShortPaginateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.BrandShort list */ 1:
                    message.list.push(BrandShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PaginateMeta meta */ 2:
                    message.meta = PaginateMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandsShortPaginateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.BrandShort list = 1; */
        for (let i = 0; i < message.list.length; i++)
            BrandShort.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PaginateMeta meta = 2; */
        if (message.meta)
            PaginateMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandsShortPaginateResponse
 */
export const GetBrandsShortPaginateResponse = new GetBrandsShortPaginateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOffsetBrandsParams$Type extends MessageType<GetOffsetBrandsParams> {
    constructor() {
        super("catalog.GetOffsetBrandsParams", [
            { no: 1, name: "params", kind: "message", T: () => GetOffsetParams }
        ]);
    }
    create(value?: PartialMessage<GetOffsetBrandsParams>): GetOffsetBrandsParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOffsetBrandsParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOffsetBrandsParams): GetOffsetBrandsParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetOffsetParams params */ 1:
                    message.params = GetOffsetParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOffsetBrandsParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetOffsetParams params = 1; */
        if (message.params)
            GetOffsetParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetOffsetBrandsParams
 */
export const GetOffsetBrandsParams = new GetOffsetBrandsParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOffsetBrandsShortParams$Type extends MessageType<GetOffsetBrandsShortParams> {
    constructor() {
        super("catalog.GetOffsetBrandsShortParams", [
            { no: 1, name: "params", kind: "message", T: () => GetOffsetParams }
        ]);
    }
    create(value?: PartialMessage<GetOffsetBrandsShortParams>): GetOffsetBrandsShortParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOffsetBrandsShortParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOffsetBrandsShortParams): GetOffsetBrandsShortParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.GetOffsetParams params */ 1:
                    message.params = GetOffsetParams.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOffsetBrandsShortParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.GetOffsetParams params = 1; */
        if (message.params)
            GetOffsetParams.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetOffsetBrandsShortParams
 */
export const GetOffsetBrandsShortParams = new GetOffsetBrandsShortParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandsOffsetResponse$Type extends MessageType<GetBrandsOffsetResponse> {
    constructor() {
        super("catalog.GetBrandsOffsetResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Brand }
        ]);
    }
    create(value?: PartialMessage<GetBrandsOffsetResponse>): GetBrandsOffsetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrandsOffsetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandsOffsetResponse): GetBrandsOffsetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.Brand list */ 1:
                    message.list.push(Brand.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandsOffsetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.Brand list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Brand.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandsOffsetResponse
 */
export const GetBrandsOffsetResponse = new GetBrandsOffsetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandsShortOffsetResponse$Type extends MessageType<GetBrandsShortOffsetResponse> {
    constructor() {
        super("catalog.GetBrandsShortOffsetResponse", [
            { no: 1, name: "list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BrandShort }
        ]);
    }
    create(value?: PartialMessage<GetBrandsShortOffsetResponse>): GetBrandsShortOffsetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<GetBrandsShortOffsetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandsShortOffsetResponse): GetBrandsShortOffsetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated catalog.BrandShort list */ 1:
                    message.list.push(BrandShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandsShortOffsetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated catalog.BrandShort list = 1; */
        for (let i = 0; i < message.list.length; i++)
            BrandShort.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandsShortOffsetResponse
 */
export const GetBrandsShortOffsetResponse = new GetBrandsShortOffsetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBrandByIdParams$Type extends MessageType<GetBrandByIdParams> {
    constructor() {
        super("catalog.GetBrandByIdParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetBrandByIdParams>): GetBrandByIdParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetBrandByIdParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBrandByIdParams): GetBrandByIdParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBrandByIdParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.GetBrandByIdParams
 */
export const GetBrandByIdParams = new GetBrandByIdParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusBrand$Type extends MessageType<StatusBrand> {
    constructor() {
        super("catalog.StatusBrand", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StatusBrand>): StatusBrand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<StatusBrand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusBrand): StatusBrand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* bool status */ 2:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusBrand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* bool status = 2; */
        if (message.status !== false)
            writer.tag(2, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.StatusBrand
 */
export const StatusBrand = new StatusBrand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBrandsParams$Type extends MessageType<DeleteBrandsParams> {
    constructor() {
        super("catalog.DeleteBrandsParams", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteBrandsParams>): DeleteBrandsParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteBrandsParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBrandsParams): DeleteBrandsParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.int32());
                    else
                        message.ids.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBrandsParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 ids = 1; */
        if (message.ids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.int32(message.ids[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.DeleteBrandsParams
 */
export const DeleteBrandsParams = new DeleteBrandsParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBrandsResponse$Type extends MessageType<DeleteBrandsResponse> {
    constructor() {
        super("catalog.DeleteBrandsResponse", [
            { no: 1, name: "list", kind: "message", T: () => StatusBrand }
        ]);
    }
    create(value?: PartialMessage<DeleteBrandsResponse>): DeleteBrandsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteBrandsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBrandsResponse): DeleteBrandsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* catalog.StatusBrand list */ 1:
                    message.list = StatusBrand.internalBinaryRead(reader, reader.uint32(), options, message.list);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBrandsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* catalog.StatusBrand list = 1; */
        if (message.list)
            StatusBrand.internalBinaryWrite(message.list, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message catalog.DeleteBrandsResponse
 */
export const DeleteBrandsResponse = new DeleteBrandsResponse$Type();
