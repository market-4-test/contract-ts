// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "catalog/catalog.proto" (package "catalog", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Catalog } from "./catalog";
import type { ToggleAttachProductsToTagsParams } from "./products";
import type { ToggleAttachProductsToBrandsParams } from "./products";
import type { CommonToggleAttachProductsResponse } from "./products";
import type { ToggleAttachProductsToCategoryParams } from "./products";
import type { CheckProductAvailableSlugParams } from "./products";
import type { UpdateProductsPricesResponse } from "./products";
import type { UpdateProductsPricesParams } from "./products";
import type { UpdateProductsStocksResponse } from "./products";
import type { UpdateProductsStocksParams } from "./products";
import type { UpdateProductsStatusResponse } from "./products";
import type { UpdateProductsStatusParams } from "./products";
import type { UpdateProductMetaParams } from "./products";
import type { CreateProductParams } from "./products";
import type { Product } from "./products";
import type { GetProductByUuidParams } from "./products";
import type { GetProductsResponse } from "./products";
import type { GetProductsByUuidsParams } from "./products";
import type { GetProductsShortOffsetResponse } from "./products";
import type { GetProductsShortOffsetParams } from "./products";
import type { GetProductsOffsetResponse } from "./products";
import type { GetProductsOffsetParams } from "./products";
import type { GetProductsShortPaginateResponse } from "./products";
import type { GetProductsShortPaginateParams } from "./products";
import type { GetProductsPaginateResponse } from "./products";
import type { GetProductsPaginateParams } from "./products";
import type { CheckAvailableSlugParams } from "./categories";
import type { UpdateOrderSortToCategoriesResponse } from "./categories";
import type { UpdateOrderSortToCategoriesParams } from "./categories";
import type { Status } from "../common/common";
import type { SetImageToCategoryParams } from "./categories";
import type { DeleteCategoriesResponse } from "./categories";
import type { DeleteCategoriesParams } from "./categories";
import type { UpdateCategoryParams } from "./categories";
import type { CreateCategoryParams } from "./categories";
import type { CategoryShort } from "./categories";
import type { Category } from "./categories";
import type { GetCategoryByIdParams } from "./categories";
import type { GetCategoriesShortOffsetResponse } from "./categories";
import type { GetCategoriesShortOffsetParams } from "./categories";
import type { GetCategoriesOffsetResponse } from "./categories";
import type { GetCategoriesOffsetParams } from "./categories";
import type { GetCategoriesShortPaginateResponse } from "./categories";
import type { GetCategoriesPaginateResponse } from "./categories";
import type { GetCategoriesPaginateParams } from "./categories";
import type { DeleteBrandsResponse } from "./brands";
import type { DeleteBrandsParams } from "./brands";
import type { UpdateBrandParams } from "./brands";
import type { CreateBrandParams } from "./brands";
import type { BrandShort } from "./brands";
import type { Brand } from "./brands";
import type { GetBrandByIdParams } from "./brands";
import type { GetBrandsShortOffsetResponse } from "./brands";
import type { GetOffsetBrandsShortParams } from "./brands";
import type { GetBrandsOffsetResponse } from "./brands";
import type { GetOffsetBrandsParams } from "./brands";
import type { GetBrandsShortPaginateResponse } from "./brands";
import type { GetBrandsPaginateResponse } from "./brands";
import type { GetBrandsPaginateParams } from "./brands";
import type { CheckAvailableTagNamesResponse } from "./tags";
import type { CheckAvailableTagNamesParams } from "./tags";
import type { DeleteTagsResponse } from "./tags";
import type { DeleteTagsParams } from "./tags";
import type { UpdateTagParams } from "./tags";
import type { CreateTagParams } from "./tags";
import type { Tag } from "./tags";
import type { GetTagByIdParams } from "./tags";
import type { GetTagsShortOffsetResponse } from "./tags";
import type { GetTagsShortOffsetParams } from "./tags";
import type { GetTagsOffsetResponse } from "./tags";
import type { GetTagsOffsetParams } from "./tags";
import type { GetTagsShortPaginateResponse } from "./tags";
import type { GetTagsShortPaginateParams } from "./tags";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTagsPaginateResponse } from "./tags";
import type { GetTagsPaginateParams } from "./tags";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service catalog.Catalog
 */
export interface ICatalogClient {
    /**
     * Tags
     *
     * @generated from protobuf rpc: GetTagsPaginate
     */
    getTagsPaginate(input: GetTagsPaginateParams, options?: RpcOptions): UnaryCall<GetTagsPaginateParams, GetTagsPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetTagsShortPaginate
     */
    getTagsShortPaginate(input: GetTagsShortPaginateParams, options?: RpcOptions): UnaryCall<GetTagsShortPaginateParams, GetTagsShortPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetTagsOffset
     */
    getTagsOffset(input: GetTagsOffsetParams, options?: RpcOptions): UnaryCall<GetTagsOffsetParams, GetTagsOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetTagsShortOffset
     */
    getTagsShortOffset(input: GetTagsShortOffsetParams, options?: RpcOptions): UnaryCall<GetTagsShortOffsetParams, GetTagsShortOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetTagById
     */
    getTagById(input: GetTagByIdParams, options?: RpcOptions): UnaryCall<GetTagByIdParams, Tag>;
    /**
     * @generated from protobuf rpc: CreateTag
     */
    createTag(input: CreateTagParams, options?: RpcOptions): UnaryCall<CreateTagParams, Tag>;
    /**
     * @generated from protobuf rpc: UpdateTag
     */
    updateTag(input: UpdateTagParams, options?: RpcOptions): UnaryCall<UpdateTagParams, Tag>;
    /**
     * @generated from protobuf rpc: DeleteTags
     */
    deleteTags(input: DeleteTagsParams, options?: RpcOptions): UnaryCall<DeleteTagsParams, DeleteTagsResponse>;
    /**
     * End Tags
     *
     * @generated from protobuf rpc: CheckAvailableTagNames
     */
    checkAvailableTagNames(input: CheckAvailableTagNamesParams, options?: RpcOptions): UnaryCall<CheckAvailableTagNamesParams, CheckAvailableTagNamesResponse>;
    /**
     * Brands
     *
     * @generated from protobuf rpc: GetBrandsPaginate
     */
    getBrandsPaginate(input: GetBrandsPaginateParams, options?: RpcOptions): UnaryCall<GetBrandsPaginateParams, GetBrandsPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetBrandsShortPaginate
     */
    getBrandsShortPaginate(input: GetBrandsPaginateParams, options?: RpcOptions): UnaryCall<GetBrandsPaginateParams, GetBrandsShortPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetBrandsOffset
     */
    getBrandsOffset(input: GetOffsetBrandsParams, options?: RpcOptions): UnaryCall<GetOffsetBrandsParams, GetBrandsOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetBrandsShortOffset
     */
    getBrandsShortOffset(input: GetOffsetBrandsShortParams, options?: RpcOptions): UnaryCall<GetOffsetBrandsShortParams, GetBrandsShortOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetBrandById
     */
    getBrandById(input: GetBrandByIdParams, options?: RpcOptions): UnaryCall<GetBrandByIdParams, Brand>;
    /**
     * @generated from protobuf rpc: GetBrandShortById
     */
    getBrandShortById(input: GetBrandByIdParams, options?: RpcOptions): UnaryCall<GetBrandByIdParams, BrandShort>;
    /**
     * @generated from protobuf rpc: CreateBrand
     */
    createBrand(input: CreateBrandParams, options?: RpcOptions): UnaryCall<CreateBrandParams, Brand>;
    /**
     * @generated from protobuf rpc: UpdateBrand
     */
    updateBrand(input: UpdateBrandParams, options?: RpcOptions): UnaryCall<UpdateBrandParams, Brand>;
    /**
     * End Brands
     *
     * @generated from protobuf rpc: DeleteBrands
     */
    deleteBrands(input: DeleteBrandsParams, options?: RpcOptions): UnaryCall<DeleteBrandsParams, DeleteBrandsResponse>;
    /**
     * Categories
     *
     * @generated from protobuf rpc: GetCategoriesPaginate
     */
    getCategoriesPaginate(input: GetCategoriesPaginateParams, options?: RpcOptions): UnaryCall<GetCategoriesPaginateParams, GetCategoriesPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetCategoriesShortPaginate
     */
    getCategoriesShortPaginate(input: GetCategoriesPaginateParams, options?: RpcOptions): UnaryCall<GetCategoriesPaginateParams, GetCategoriesShortPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetCategoriesOffset
     */
    getCategoriesOffset(input: GetCategoriesOffsetParams, options?: RpcOptions): UnaryCall<GetCategoriesOffsetParams, GetCategoriesOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetCategoriesShortOffset
     */
    getCategoriesShortOffset(input: GetCategoriesShortOffsetParams, options?: RpcOptions): UnaryCall<GetCategoriesShortOffsetParams, GetCategoriesShortOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetCategoryById
     */
    getCategoryById(input: GetCategoryByIdParams, options?: RpcOptions): UnaryCall<GetCategoryByIdParams, Category>;
    /**
     * @generated from protobuf rpc: GetCategoryShortById
     */
    getCategoryShortById(input: GetCategoryByIdParams, options?: RpcOptions): UnaryCall<GetCategoryByIdParams, CategoryShort>;
    /**
     * @generated from protobuf rpc: CreateCategory
     */
    createCategory(input: CreateCategoryParams, options?: RpcOptions): UnaryCall<CreateCategoryParams, Category>;
    /**
     * @generated from protobuf rpc: UpdateCategory
     */
    updateCategory(input: UpdateCategoryParams, options?: RpcOptions): UnaryCall<UpdateCategoryParams, Category>;
    /**
     * @generated from protobuf rpc: DeleteCategories
     */
    deleteCategories(input: DeleteCategoriesParams, options?: RpcOptions): UnaryCall<DeleteCategoriesParams, DeleteCategoriesResponse>;
    /**
     * @generated from protobuf rpc: SetImageToCategory
     */
    setImageToCategory(input: SetImageToCategoryParams, options?: RpcOptions): UnaryCall<SetImageToCategoryParams, Status>;
    /**
     * @generated from protobuf rpc: UpdateOrderSortToCategories
     */
    updateOrderSortToCategories(input: UpdateOrderSortToCategoriesParams, options?: RpcOptions): UnaryCall<UpdateOrderSortToCategoriesParams, UpdateOrderSortToCategoriesResponse>;
    /**
     * End Categories
     *
     * @generated from protobuf rpc: CheckCategoryAvailableSlug
     */
    checkCategoryAvailableSlug(input: CheckAvailableSlugParams, options?: RpcOptions): UnaryCall<CheckAvailableSlugParams, Status>;
    /**
     * Products
     *
     * @generated from protobuf rpc: GetProductsPaginate
     */
    getProductsPaginate(input: GetProductsPaginateParams, options?: RpcOptions): UnaryCall<GetProductsPaginateParams, GetProductsPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetProductsShortPaginate
     */
    getProductsShortPaginate(input: GetProductsShortPaginateParams, options?: RpcOptions): UnaryCall<GetProductsShortPaginateParams, GetProductsShortPaginateResponse>;
    /**
     * @generated from protobuf rpc: GetProductsOffset
     */
    getProductsOffset(input: GetProductsOffsetParams, options?: RpcOptions): UnaryCall<GetProductsOffsetParams, GetProductsOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetProductsShortOffset
     */
    getProductsShortOffset(input: GetProductsShortOffsetParams, options?: RpcOptions): UnaryCall<GetProductsShortOffsetParams, GetProductsShortOffsetResponse>;
    /**
     * @generated from protobuf rpc: GetProductsByUuids
     */
    getProductsByUuids(input: GetProductsByUuidsParams, options?: RpcOptions): UnaryCall<GetProductsByUuidsParams, GetProductsResponse>;
    /**
     * @generated from protobuf rpc: GetProductByUuid
     */
    getProductByUuid(input: GetProductByUuidParams, options?: RpcOptions): UnaryCall<GetProductByUuidParams, Product>;
    /**
     * @generated from protobuf rpc: CreateProduct
     */
    createProduct(input: CreateProductParams, options?: RpcOptions): UnaryCall<CreateProductParams, Product>;
    /**
     * @generated from protobuf rpc: UpdateProduct
     */
    updateProduct(input: UpdateProductMetaParams, options?: RpcOptions): UnaryCall<UpdateProductMetaParams, Product>;
    /**
     * @generated from protobuf rpc: UpdateProductsStatus
     */
    updateProductsStatus(input: UpdateProductsStatusParams, options?: RpcOptions): UnaryCall<UpdateProductsStatusParams, UpdateProductsStatusResponse>;
    /**
     * @generated from protobuf rpc: UpdateProductsStocks
     */
    updateProductsStocks(input: UpdateProductsStocksParams, options?: RpcOptions): UnaryCall<UpdateProductsStocksParams, UpdateProductsStocksResponse>;
    /**
     * @generated from protobuf rpc: UpdateProductsPrices
     */
    updateProductsPrices(input: UpdateProductsPricesParams, options?: RpcOptions): UnaryCall<UpdateProductsPricesParams, UpdateProductsPricesResponse>;
    /**
     * @generated from protobuf rpc: CheckProductAvailableSlug
     */
    checkProductAvailableSlug(input: CheckProductAvailableSlugParams, options?: RpcOptions): UnaryCall<CheckProductAvailableSlugParams, Status>;
    /**
     * @generated from protobuf rpc: AttachProductsToCategory
     */
    attachProductsToCategory(input: ToggleAttachProductsToCategoryParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse>;
    /**
     * @generated from protobuf rpc: DetachProductsToCategory
     */
    detachProductsToCategory(input: ToggleAttachProductsToCategoryParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse>;
    /**
     * @generated from protobuf rpc: AttachProductsToBrand
     */
    attachProductsToBrand(input: ToggleAttachProductsToBrandsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse>;
    /**
     * @generated from protobuf rpc: DetachProductsToBrand
     */
    detachProductsToBrand(input: ToggleAttachProductsToBrandsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse>;
    /**
     * @generated from protobuf rpc: AttachProductsToTag
     */
    attachProductsToTag(input: ToggleAttachProductsToTagsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse>;
    /**
     * End Products
     *
     * @generated from protobuf rpc: DetachProductsToTag
     */
    detachProductsToTag(input: ToggleAttachProductsToTagsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse>;
}
/**
 * @generated from protobuf service catalog.Catalog
 */
export class CatalogClient implements ICatalogClient, ServiceInfo {
    typeName = Catalog.typeName;
    methods = Catalog.methods;
    options = Catalog.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Tags
     *
     * @generated from protobuf rpc: GetTagsPaginate
     */
    getTagsPaginate(input: GetTagsPaginateParams, options?: RpcOptions): UnaryCall<GetTagsPaginateParams, GetTagsPaginateResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagsPaginateParams, GetTagsPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTagsShortPaginate
     */
    getTagsShortPaginate(input: GetTagsShortPaginateParams, options?: RpcOptions): UnaryCall<GetTagsShortPaginateParams, GetTagsShortPaginateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagsShortPaginateParams, GetTagsShortPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTagsOffset
     */
    getTagsOffset(input: GetTagsOffsetParams, options?: RpcOptions): UnaryCall<GetTagsOffsetParams, GetTagsOffsetResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagsOffsetParams, GetTagsOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTagsShortOffset
     */
    getTagsShortOffset(input: GetTagsShortOffsetParams, options?: RpcOptions): UnaryCall<GetTagsShortOffsetParams, GetTagsShortOffsetResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagsShortOffsetParams, GetTagsShortOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTagById
     */
    getTagById(input: GetTagByIdParams, options?: RpcOptions): UnaryCall<GetTagByIdParams, Tag> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTagByIdParams, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateTag
     */
    createTag(input: CreateTagParams, options?: RpcOptions): UnaryCall<CreateTagParams, Tag> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTagParams, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTag
     */
    updateTag(input: UpdateTagParams, options?: RpcOptions): UnaryCall<UpdateTagParams, Tag> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTagParams, Tag>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteTags
     */
    deleteTags(input: DeleteTagsParams, options?: RpcOptions): UnaryCall<DeleteTagsParams, DeleteTagsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTagsParams, DeleteTagsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * End Tags
     *
     * @generated from protobuf rpc: CheckAvailableTagNames
     */
    checkAvailableTagNames(input: CheckAvailableTagNamesParams, options?: RpcOptions): UnaryCall<CheckAvailableTagNamesParams, CheckAvailableTagNamesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckAvailableTagNamesParams, CheckAvailableTagNamesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Brands
     *
     * @generated from protobuf rpc: GetBrandsPaginate
     */
    getBrandsPaginate(input: GetBrandsPaginateParams, options?: RpcOptions): UnaryCall<GetBrandsPaginateParams, GetBrandsPaginateResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrandsPaginateParams, GetBrandsPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBrandsShortPaginate
     */
    getBrandsShortPaginate(input: GetBrandsPaginateParams, options?: RpcOptions): UnaryCall<GetBrandsPaginateParams, GetBrandsShortPaginateResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrandsPaginateParams, GetBrandsShortPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBrandsOffset
     */
    getBrandsOffset(input: GetOffsetBrandsParams, options?: RpcOptions): UnaryCall<GetOffsetBrandsParams, GetBrandsOffsetResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOffsetBrandsParams, GetBrandsOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBrandsShortOffset
     */
    getBrandsShortOffset(input: GetOffsetBrandsShortParams, options?: RpcOptions): UnaryCall<GetOffsetBrandsShortParams, GetBrandsShortOffsetResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOffsetBrandsShortParams, GetBrandsShortOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBrandById
     */
    getBrandById(input: GetBrandByIdParams, options?: RpcOptions): UnaryCall<GetBrandByIdParams, Brand> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrandByIdParams, Brand>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBrandShortById
     */
    getBrandShortById(input: GetBrandByIdParams, options?: RpcOptions): UnaryCall<GetBrandByIdParams, BrandShort> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBrandByIdParams, BrandShort>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateBrand
     */
    createBrand(input: CreateBrandParams, options?: RpcOptions): UnaryCall<CreateBrandParams, Brand> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBrandParams, Brand>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateBrand
     */
    updateBrand(input: UpdateBrandParams, options?: RpcOptions): UnaryCall<UpdateBrandParams, Brand> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateBrandParams, Brand>("unary", this._transport, method, opt, input);
    }
    /**
     * End Brands
     *
     * @generated from protobuf rpc: DeleteBrands
     */
    deleteBrands(input: DeleteBrandsParams, options?: RpcOptions): UnaryCall<DeleteBrandsParams, DeleteBrandsResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteBrandsParams, DeleteBrandsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Categories
     *
     * @generated from protobuf rpc: GetCategoriesPaginate
     */
    getCategoriesPaginate(input: GetCategoriesPaginateParams, options?: RpcOptions): UnaryCall<GetCategoriesPaginateParams, GetCategoriesPaginateResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoriesPaginateParams, GetCategoriesPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoriesShortPaginate
     */
    getCategoriesShortPaginate(input: GetCategoriesPaginateParams, options?: RpcOptions): UnaryCall<GetCategoriesPaginateParams, GetCategoriesShortPaginateResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoriesPaginateParams, GetCategoriesShortPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoriesOffset
     */
    getCategoriesOffset(input: GetCategoriesOffsetParams, options?: RpcOptions): UnaryCall<GetCategoriesOffsetParams, GetCategoriesOffsetResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoriesOffsetParams, GetCategoriesOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoriesShortOffset
     */
    getCategoriesShortOffset(input: GetCategoriesShortOffsetParams, options?: RpcOptions): UnaryCall<GetCategoriesShortOffsetParams, GetCategoriesShortOffsetResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoriesShortOffsetParams, GetCategoriesShortOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoryById
     */
    getCategoryById(input: GetCategoryByIdParams, options?: RpcOptions): UnaryCall<GetCategoryByIdParams, Category> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoryByIdParams, Category>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoryShortById
     */
    getCategoryShortById(input: GetCategoryByIdParams, options?: RpcOptions): UnaryCall<GetCategoryByIdParams, CategoryShort> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCategoryByIdParams, CategoryShort>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateCategory
     */
    createCategory(input: CreateCategoryParams, options?: RpcOptions): UnaryCall<CreateCategoryParams, Category> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCategoryParams, Category>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateCategory
     */
    updateCategory(input: UpdateCategoryParams, options?: RpcOptions): UnaryCall<UpdateCategoryParams, Category> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateCategoryParams, Category>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteCategories
     */
    deleteCategories(input: DeleteCategoriesParams, options?: RpcOptions): UnaryCall<DeleteCategoriesParams, DeleteCategoriesResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCategoriesParams, DeleteCategoriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetImageToCategory
     */
    setImageToCategory(input: SetImageToCategoryParams, options?: RpcOptions): UnaryCall<SetImageToCategoryParams, Status> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetImageToCategoryParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateOrderSortToCategories
     */
    updateOrderSortToCategories(input: UpdateOrderSortToCategoriesParams, options?: RpcOptions): UnaryCall<UpdateOrderSortToCategoriesParams, UpdateOrderSortToCategoriesResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateOrderSortToCategoriesParams, UpdateOrderSortToCategoriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * End Categories
     *
     * @generated from protobuf rpc: CheckCategoryAvailableSlug
     */
    checkCategoryAvailableSlug(input: CheckAvailableSlugParams, options?: RpcOptions): UnaryCall<CheckAvailableSlugParams, Status> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckAvailableSlugParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * Products
     *
     * @generated from protobuf rpc: GetProductsPaginate
     */
    getProductsPaginate(input: GetProductsPaginateParams, options?: RpcOptions): UnaryCall<GetProductsPaginateParams, GetProductsPaginateResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductsPaginateParams, GetProductsPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProductsShortPaginate
     */
    getProductsShortPaginate(input: GetProductsShortPaginateParams, options?: RpcOptions): UnaryCall<GetProductsShortPaginateParams, GetProductsShortPaginateResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductsShortPaginateParams, GetProductsShortPaginateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProductsOffset
     */
    getProductsOffset(input: GetProductsOffsetParams, options?: RpcOptions): UnaryCall<GetProductsOffsetParams, GetProductsOffsetResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductsOffsetParams, GetProductsOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProductsShortOffset
     */
    getProductsShortOffset(input: GetProductsShortOffsetParams, options?: RpcOptions): UnaryCall<GetProductsShortOffsetParams, GetProductsShortOffsetResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductsShortOffsetParams, GetProductsShortOffsetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProductsByUuids
     */
    getProductsByUuids(input: GetProductsByUuidsParams, options?: RpcOptions): UnaryCall<GetProductsByUuidsParams, GetProductsResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductsByUuidsParams, GetProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetProductByUuid
     */
    getProductByUuid(input: GetProductByUuidParams, options?: RpcOptions): UnaryCall<GetProductByUuidParams, Product> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProductByUuidParams, Product>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateProduct
     */
    createProduct(input: CreateProductParams, options?: RpcOptions): UnaryCall<CreateProductParams, Product> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateProductParams, Product>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProduct
     */
    updateProduct(input: UpdateProductMetaParams, options?: RpcOptions): UnaryCall<UpdateProductMetaParams, Product> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProductMetaParams, Product>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProductsStatus
     */
    updateProductsStatus(input: UpdateProductsStatusParams, options?: RpcOptions): UnaryCall<UpdateProductsStatusParams, UpdateProductsStatusResponse> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProductsStatusParams, UpdateProductsStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProductsStocks
     */
    updateProductsStocks(input: UpdateProductsStocksParams, options?: RpcOptions): UnaryCall<UpdateProductsStocksParams, UpdateProductsStocksResponse> {
        const method = this.methods[39], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProductsStocksParams, UpdateProductsStocksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProductsPrices
     */
    updateProductsPrices(input: UpdateProductsPricesParams, options?: RpcOptions): UnaryCall<UpdateProductsPricesParams, UpdateProductsPricesResponse> {
        const method = this.methods[40], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProductsPricesParams, UpdateProductsPricesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckProductAvailableSlug
     */
    checkProductAvailableSlug(input: CheckProductAvailableSlugParams, options?: RpcOptions): UnaryCall<CheckProductAvailableSlugParams, Status> {
        const method = this.methods[41], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckProductAvailableSlugParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachProductsToCategory
     */
    attachProductsToCategory(input: ToggleAttachProductsToCategoryParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[42], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachProductsToCategory
     */
    detachProductsToCategory(input: ToggleAttachProductsToCategoryParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[43], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToCategoryParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachProductsToBrand
     */
    attachProductsToBrand(input: ToggleAttachProductsToBrandsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[44], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachProductsToBrand
     */
    detachProductsToBrand(input: ToggleAttachProductsToBrandsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[45], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToBrandsParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachProductsToTag
     */
    attachProductsToTag(input: ToggleAttachProductsToTagsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[46], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * End Products
     *
     * @generated from protobuf rpc: DetachProductsToTag
     */
    detachProductsToTag(input: ToggleAttachProductsToTagsParams, options?: RpcOptions): UnaryCall<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse> {
        const method = this.methods[47], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleAttachProductsToTagsParams, CommonToggleAttachProductsResponse>("unary", this._transport, method, opt, input);
    }
}
