// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "search/search.proto" (package "search", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Search } from "./search";
import type { Status } from "../common/common";
import type { SetActiveEntitiesParams } from "./search";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetEntitiesResponse } from "./search";
import type { GetEntitiesParams } from "./search";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service search.Search
 */
export interface ISearchClient {
    /**
     * @generated from protobuf rpc: GetEntities
     */
    getEntities(input: GetEntitiesParams, options?: RpcOptions): UnaryCall<GetEntitiesParams, GetEntitiesResponse>;
    /**
     * @generated from protobuf rpc: UpsertEntities
     */
    upsertEntities(input: GetEntitiesParams, options?: RpcOptions): UnaryCall<GetEntitiesParams, GetEntitiesResponse>;
    /**
     * @generated from protobuf rpc: SetActiveEntities
     */
    setActiveEntities(input: SetActiveEntitiesParams, options?: RpcOptions): UnaryCall<SetActiveEntitiesParams, Status>;
}
/**
 * @generated from protobuf service search.Search
 */
export class SearchClient implements ISearchClient, ServiceInfo {
    typeName = Search.typeName;
    methods = Search.methods;
    options = Search.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetEntities
     */
    getEntities(input: GetEntitiesParams, options?: RpcOptions): UnaryCall<GetEntitiesParams, GetEntitiesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEntitiesParams, GetEntitiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertEntities
     */
    upsertEntities(input: GetEntitiesParams, options?: RpcOptions): UnaryCall<GetEntitiesParams, GetEntitiesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEntitiesParams, GetEntitiesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetActiveEntities
     */
    setActiveEntities(input: SetActiveEntitiesParams, options?: RpcOptions): UnaryCall<SetActiveEntitiesParams, Status> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetActiveEntitiesParams, Status>("unary", this._transport, method, opt, input);
    }
}
