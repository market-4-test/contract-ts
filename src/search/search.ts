// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "search/search.proto" (package "search", syntax proto3)
// tslint:disable
import { Status } from "../common/common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message search.Entity
 */
export interface Entity {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: search.SearchEntity entity_type = 2
     */
    entityType: SearchEntity;
    /**
     * @generated from protobuf field: string text = 3
     */
    text: string;
    /**
     * @generated from protobuf field: bool is_active = 4
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5
     */
    createdAt?: Timestamp;
}
/**
 * @generated from protobuf message search.UpsertEntityParams
 */
export interface UpsertEntityParams {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: search.SearchEntity entity_type = 2
     */
    entityType: SearchEntity;
    /**
     * @generated from protobuf field: string text = 3
     */
    text: string;
    /**
     * @generated from protobuf field: bool is_active = 4
     */
    isActive: boolean;
}
/**
 * @generated from protobuf message search.GetEntitiesParams
 */
export interface GetEntitiesParams {
    /**
     * @generated from protobuf field: string query = 1
     */
    query: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
    /**
     * @generated from protobuf field: optional search.SearchEntity type = 4
     */
    type?: SearchEntity;
}
/**
 * @generated from protobuf message search.GetEntitiesResponse
 */
export interface GetEntitiesResponse {
    /**
     * @generated from protobuf field: repeated search.Entity entities = 1
     */
    entities: Entity[];
}
/**
 * @generated from protobuf message search.SetActiveEntity
 */
export interface SetActiveEntity {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: search.SearchEntity entity_type = 2
     */
    entityType: SearchEntity;
    /**
     * @generated from protobuf field: bool is_active = 3
     */
    isActive: boolean;
}
/**
 * @generated from protobuf message search.SetActiveEntitiesParams
 */
export interface SetActiveEntitiesParams {
    /**
     * @generated from protobuf field: search.SetActiveEntity list = 1
     */
    list?: SetActiveEntity;
}
/**
 * @generated from protobuf enum search.SearchEntity
 */
export enum SearchEntity {
    /**
     * @generated from protobuf enum value: SEARCH_ENTITY_UNSPECIFIED = 0;
     */
    SEARCH_ENTITY_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PRODUCT = 1;
     */
    PRODUCT = 1,
    /**
     * @generated from protobuf enum value: CATEGORY = 2;
     */
    CATEGORY = 2,
    /**
     * @generated from protobuf enum value: TAG = 3;
     */
    TAG = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Entity$Type extends MessageType<Entity> {
    constructor() {
        super("search.Entity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["search.SearchEntity", SearchEntity] },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Entity>): Entity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.entityType = 0;
        message.text = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<Entity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Entity): Entity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* search.SearchEntity entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Entity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* search.SearchEntity entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.Entity
 */
export const Entity = new Entity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertEntityParams$Type extends MessageType<UpsertEntityParams> {
    constructor() {
        super("search.UpsertEntityParams", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["search.SearchEntity", SearchEntity] },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertEntityParams>): UpsertEntityParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.entityType = 0;
        message.text = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<UpsertEntityParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertEntityParams): UpsertEntityParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* search.SearchEntity entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertEntityParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* search.SearchEntity entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.UpsertEntityParams
 */
export const UpsertEntityParams = new UpsertEntityParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEntitiesParams$Type extends MessageType<GetEntitiesParams> {
    constructor() {
        super("search.GetEntitiesParams", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "type", kind: "enum", opt: true, T: () => ["search.SearchEntity", SearchEntity] }
        ]);
    }
    create(value?: PartialMessage<GetEntitiesParams>): GetEntitiesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<GetEntitiesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEntitiesParams): GetEntitiesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                case /* optional search.SearchEntity type */ 4:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEntitiesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        /* optional search.SearchEntity type = 4; */
        if (message.type !== undefined)
            writer.tag(4, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.GetEntitiesParams
 */
export const GetEntitiesParams = new GetEntitiesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEntitiesResponse$Type extends MessageType<GetEntitiesResponse> {
    constructor() {
        super("search.GetEntitiesResponse", [
            { no: 1, name: "entities", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Entity }
        ]);
    }
    create(value?: PartialMessage<GetEntitiesResponse>): GetEntitiesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entities = [];
        if (value !== undefined)
            reflectionMergePartial<GetEntitiesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEntitiesResponse): GetEntitiesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated search.Entity entities */ 1:
                    message.entities.push(Entity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEntitiesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated search.Entity entities = 1; */
        for (let i = 0; i < message.entities.length; i++)
            Entity.internalBinaryWrite(message.entities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.GetEntitiesResponse
 */
export const GetEntitiesResponse = new GetEntitiesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActiveEntity$Type extends MessageType<SetActiveEntity> {
    constructor() {
        super("search.SetActiveEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "entity_type", kind: "enum", T: () => ["search.SearchEntity", SearchEntity] },
            { no: 3, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetActiveEntity>): SetActiveEntity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.entityType = 0;
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<SetActiveEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActiveEntity): SetActiveEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* search.SearchEntity entity_type */ 2:
                    message.entityType = reader.int32();
                    break;
                case /* bool is_active */ 3:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActiveEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* search.SearchEntity entity_type = 2; */
        if (message.entityType !== 0)
            writer.tag(2, WireType.Varint).int32(message.entityType);
        /* bool is_active = 3; */
        if (message.isActive !== false)
            writer.tag(3, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.SetActiveEntity
 */
export const SetActiveEntity = new SetActiveEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetActiveEntitiesParams$Type extends MessageType<SetActiveEntitiesParams> {
    constructor() {
        super("search.SetActiveEntitiesParams", [
            { no: 1, name: "list", kind: "message", T: () => SetActiveEntity }
        ]);
    }
    create(value?: PartialMessage<SetActiveEntitiesParams>): SetActiveEntitiesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetActiveEntitiesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetActiveEntitiesParams): SetActiveEntitiesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* search.SetActiveEntity list */ 1:
                    message.list = SetActiveEntity.internalBinaryRead(reader, reader.uint32(), options, message.list);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetActiveEntitiesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* search.SetActiveEntity list = 1; */
        if (message.list)
            SetActiveEntity.internalBinaryWrite(message.list, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.SetActiveEntitiesParams
 */
export const SetActiveEntitiesParams = new SetActiveEntitiesParams$Type();
/**
 * @generated ServiceType for protobuf service search.Search
 */
export const Search = new ServiceType("search.Search", [
    { name: "GetEntities", options: {}, I: GetEntitiesParams, O: GetEntitiesResponse },
    { name: "UpsertEntities", options: {}, I: GetEntitiesParams, O: GetEntitiesResponse },
    { name: "SetActiveEntities", options: {}, I: SetActiveEntitiesParams, O: Status }
]);
