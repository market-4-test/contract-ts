// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "space/space.proto" (package "space", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Space } from "./space";
import type { BlockEmployeeParams } from "./employees";
import type { CheckEmployeeAvailableUsernameParams } from "./employees";
import type { UpdateEmployeeParams } from "./employees";
import type { CreateEmployeeParams } from "./employees";
import type { GetEmployeesResponse } from "./employees";
import type { GetEmployeesParams } from "./employees";
import type { UpdatePermissionParams } from "./permissions";
import type { CreatePermissionParams } from "./permissions";
import type { GetPermissionsResponse } from "./permissions";
import type { GetPermissionsParams } from "./permissions";
import type { ToggleRoleToEmployeesParams } from "./roles";
import type { DeleteRoleResponse } from "./roles";
import type { DeleteRoleParams } from "./roles";
import type { ValidationErrors } from "../common/common";
import type { CreateRoleParams } from "./roles";
import type { GetRolesResponse } from "./roles";
import type { GetRolesParams } from "./roles";
import type { Profile } from "./profiles";
import type { GetProfileParams } from "./profiles";
import type { ChangePasswordParams } from "./auth";
import type { RefreshTokenParams } from "./auth";
import type { AuthResponse } from "./auth";
import type { LoginParams } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Status } from "../common/common";
import type { AuthenticateParams } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service space.Space
 */
export interface ISpaceClient {
    /**
     * Auth
     *
     * @generated from protobuf rpc: Authenticate
     */
    authenticate(input: AuthenticateParams, options?: RpcOptions): UnaryCall<AuthenticateParams, Status>;
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginParams, options?: RpcOptions): UnaryCall<LoginParams, AuthResponse>;
    /**
     * @generated from protobuf rpc: RefreshToken
     */
    refreshToken(input: RefreshTokenParams, options?: RpcOptions): UnaryCall<RefreshTokenParams, AuthResponse>;
    /**
     * @generated from protobuf rpc: ChangePassword
     */
    changePassword(input: ChangePasswordParams, options?: RpcOptions): UnaryCall<ChangePasswordParams, Status>;
    /**
     * Profile
     *
     * @generated from protobuf rpc: GetProfile
     */
    getProfile(input: GetProfileParams, options?: RpcOptions): UnaryCall<GetProfileParams, Profile>;
    /**
     * Roles
     *
     * @generated from protobuf rpc: GetRoles
     */
    getRoles(input: GetRolesParams, options?: RpcOptions): UnaryCall<GetRolesParams, GetRolesResponse>;
    /**
     * @generated from protobuf rpc: CreateRole
     */
    createRole(input: CreateRoleParams, options?: RpcOptions): UnaryCall<CreateRoleParams, ValidationErrors>;
    /**
     * @generated from protobuf rpc: UpdateRole
     */
    updateRole(input: CreateRoleParams, options?: RpcOptions): UnaryCall<CreateRoleParams, ValidationErrors>;
    /**
     * @generated from protobuf rpc: DeleteRole
     */
    deleteRole(input: DeleteRoleParams, options?: RpcOptions): UnaryCall<DeleteRoleParams, DeleteRoleResponse>;
    /**
     * @generated from protobuf rpc: AttachRoleToEmployee
     */
    attachRoleToEmployee(input: ToggleRoleToEmployeesParams, options?: RpcOptions): UnaryCall<ToggleRoleToEmployeesParams, Status>;
    /**
     * @generated from protobuf rpc: DetachRoleFromEmployee
     */
    detachRoleFromEmployee(input: ToggleRoleToEmployeesParams, options?: RpcOptions): UnaryCall<ToggleRoleToEmployeesParams, Status>;
    /**
     * Permissions
     *
     * @generated from protobuf rpc: GetPermissions
     */
    getPermissions(input: GetPermissionsParams, options?: RpcOptions): UnaryCall<GetPermissionsParams, GetPermissionsResponse>;
    /**
     * @generated from protobuf rpc: CreatePermission
     */
    createPermission(input: CreatePermissionParams, options?: RpcOptions): UnaryCall<CreatePermissionParams, Status>;
    /**
     * @generated from protobuf rpc: UpdatePermission
     */
    updatePermission(input: UpdatePermissionParams, options?: RpcOptions): UnaryCall<UpdatePermissionParams, Status>;
    /**
     * Employees
     *
     * @generated from protobuf rpc: GetEmployees
     */
    getEmployees(input: GetEmployeesParams, options?: RpcOptions): UnaryCall<GetEmployeesParams, GetEmployeesResponse>;
    /**
     * @generated from protobuf rpc: CreateEmployee
     */
    createEmployee(input: CreateEmployeeParams, options?: RpcOptions): UnaryCall<CreateEmployeeParams, ValidationErrors>;
    /**
     * @generated from protobuf rpc: UpdateEmployee
     */
    updateEmployee(input: UpdateEmployeeParams, options?: RpcOptions): UnaryCall<UpdateEmployeeParams, ValidationErrors>;
    /**
     * @generated from protobuf rpc: CheckEmployeeAvailableUsername
     */
    checkEmployeeAvailableUsername(input: CheckEmployeeAvailableUsernameParams, options?: RpcOptions): UnaryCall<CheckEmployeeAvailableUsernameParams, Status>;
    /**
     * @generated from protobuf rpc: BlockEmployee
     */
    blockEmployee(input: BlockEmployeeParams, options?: RpcOptions): UnaryCall<BlockEmployeeParams, Status>;
}
/**
 * @generated from protobuf service space.Space
 */
export class SpaceClient implements ISpaceClient, ServiceInfo {
    typeName = Space.typeName;
    methods = Space.methods;
    options = Space.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Auth
     *
     * @generated from protobuf rpc: Authenticate
     */
    authenticate(input: AuthenticateParams, options?: RpcOptions): UnaryCall<AuthenticateParams, Status> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthenticateParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginParams, options?: RpcOptions): UnaryCall<LoginParams, AuthResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginParams, AuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshToken
     */
    refreshToken(input: RefreshTokenParams, options?: RpcOptions): UnaryCall<RefreshTokenParams, AuthResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshTokenParams, AuthResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangePassword
     */
    changePassword(input: ChangePasswordParams, options?: RpcOptions): UnaryCall<ChangePasswordParams, Status> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * Profile
     *
     * @generated from protobuf rpc: GetProfile
     */
    getProfile(input: GetProfileParams, options?: RpcOptions): UnaryCall<GetProfileParams, Profile> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProfileParams, Profile>("unary", this._transport, method, opt, input);
    }
    /**
     * Roles
     *
     * @generated from protobuf rpc: GetRoles
     */
    getRoles(input: GetRolesParams, options?: RpcOptions): UnaryCall<GetRolesParams, GetRolesResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRolesParams, GetRolesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateRole
     */
    createRole(input: CreateRoleParams, options?: RpcOptions): UnaryCall<CreateRoleParams, ValidationErrors> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoleParams, ValidationErrors>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateRole
     */
    updateRole(input: CreateRoleParams, options?: RpcOptions): UnaryCall<CreateRoleParams, ValidationErrors> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoleParams, ValidationErrors>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRole
     */
    deleteRole(input: DeleteRoleParams, options?: RpcOptions): UnaryCall<DeleteRoleParams, DeleteRoleResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRoleParams, DeleteRoleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachRoleToEmployee
     */
    attachRoleToEmployee(input: ToggleRoleToEmployeesParams, options?: RpcOptions): UnaryCall<ToggleRoleToEmployeesParams, Status> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleRoleToEmployeesParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachRoleFromEmployee
     */
    detachRoleFromEmployee(input: ToggleRoleToEmployeesParams, options?: RpcOptions): UnaryCall<ToggleRoleToEmployeesParams, Status> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleRoleToEmployeesParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * Permissions
     *
     * @generated from protobuf rpc: GetPermissions
     */
    getPermissions(input: GetPermissionsParams, options?: RpcOptions): UnaryCall<GetPermissionsParams, GetPermissionsResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPermissionsParams, GetPermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePermission
     */
    createPermission(input: CreatePermissionParams, options?: RpcOptions): UnaryCall<CreatePermissionParams, Status> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreatePermissionParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePermission
     */
    updatePermission(input: UpdatePermissionParams, options?: RpcOptions): UnaryCall<UpdatePermissionParams, Status> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePermissionParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * Employees
     *
     * @generated from protobuf rpc: GetEmployees
     */
    getEmployees(input: GetEmployeesParams, options?: RpcOptions): UnaryCall<GetEmployeesParams, GetEmployeesResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEmployeesParams, GetEmployeesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateEmployee
     */
    createEmployee(input: CreateEmployeeParams, options?: RpcOptions): UnaryCall<CreateEmployeeParams, ValidationErrors> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateEmployeeParams, ValidationErrors>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateEmployee
     */
    updateEmployee(input: UpdateEmployeeParams, options?: RpcOptions): UnaryCall<UpdateEmployeeParams, ValidationErrors> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateEmployeeParams, ValidationErrors>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckEmployeeAvailableUsername
     */
    checkEmployeeAvailableUsername(input: CheckEmployeeAvailableUsernameParams, options?: RpcOptions): UnaryCall<CheckEmployeeAvailableUsernameParams, Status> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckEmployeeAvailableUsernameParams, Status>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BlockEmployee
     */
    blockEmployee(input: BlockEmployeeParams, options?: RpcOptions): UnaryCall<BlockEmployeeParams, Status> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<BlockEmployeeParams, Status>("unary", this._transport, method, opt, input);
    }
}
