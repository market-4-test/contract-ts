// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "space/roles.proto" (package "space", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message space.Role
 */
export interface Role {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: bool can_delete = 3
     */
    canDelete: boolean;
}
/**
 * @generated from protobuf message space.GetRolesParams
 */
export interface GetRolesParams {
}
/**
 * @generated from protobuf message space.GetRolesResponse
 */
export interface GetRolesResponse {
    /**
     * @generated from protobuf field: space.Role list = 1
     */
    list?: Role;
}
/**
 * @generated from protobuf message space.CreateRoleParams
 */
export interface CreateRoleParams {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: int32 attach_permission_ids = 2
     */
    attachPermissionIds: number;
}
/**
 * @generated from protobuf message space.UpdateRoleParams
 */
export interface UpdateRoleParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: int32 attach_permission_ids = 3
     */
    attachPermissionIds: number;
    /**
     * @generated from protobuf field: int32 detach_permission_ids = 4
     */
    detachPermissionIds: number;
}
/**
 * @generated from protobuf message space.DeleteRoleParams
 */
export interface DeleteRoleParams {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message space.DeleteRoleResponse
 */
export interface DeleteRoleResponse {
    /**
     * @generated from protobuf field: repeated int32 attached_employees = 1
     */
    attachedEmployees: number[];
}
/**
 * @generated from protobuf message space.ToggleRoleToEmployeesParams
 */
export interface ToggleRoleToEmployeesParams {
    /**
     * @generated from protobuf field: int32 role_id = 1
     */
    roleId: number;
    /**
     * @generated from protobuf field: repeated int32 employee_id = 2
     */
    employeeId: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Role$Type extends MessageType<Role> {
    constructor() {
        super("space.Role", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "can_delete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Role>): Role {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.canDelete = false;
        if (value !== undefined)
            reflectionMergePartial<Role>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Role): Role {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool can_delete */ 3:
                    message.canDelete = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Role, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool can_delete = 3; */
        if (message.canDelete !== false)
            writer.tag(3, WireType.Varint).bool(message.canDelete);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.Role
 */
export const Role = new Role$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRolesParams$Type extends MessageType<GetRolesParams> {
    constructor() {
        super("space.GetRolesParams", []);
    }
    create(value?: PartialMessage<GetRolesParams>): GetRolesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRolesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRolesParams): GetRolesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRolesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.GetRolesParams
 */
export const GetRolesParams = new GetRolesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRolesResponse$Type extends MessageType<GetRolesResponse> {
    constructor() {
        super("space.GetRolesResponse", [
            { no: 1, name: "list", kind: "message", T: () => Role }
        ]);
    }
    create(value?: PartialMessage<GetRolesResponse>): GetRolesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRolesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRolesResponse): GetRolesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* space.Role list */ 1:
                    message.list = Role.internalBinaryRead(reader, reader.uint32(), options, message.list);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRolesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* space.Role list = 1; */
        if (message.list)
            Role.internalBinaryWrite(message.list, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.GetRolesResponse
 */
export const GetRolesResponse = new GetRolesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoleParams$Type extends MessageType<CreateRoleParams> {
    constructor() {
        super("space.CreateRoleParams", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "attach_permission_ids", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRoleParams>): CreateRoleParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.attachPermissionIds = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateRoleParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoleParams): CreateRoleParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 attach_permission_ids */ 2:
                    message.attachPermissionIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoleParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 attach_permission_ids = 2; */
        if (message.attachPermissionIds !== 0)
            writer.tag(2, WireType.Varint).int32(message.attachPermissionIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.CreateRoleParams
 */
export const CreateRoleParams = new CreateRoleParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRoleParams$Type extends MessageType<UpdateRoleParams> {
    constructor() {
        super("space.UpdateRoleParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "attach_permission_ids", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "detach_permission_ids", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRoleParams>): UpdateRoleParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.attachPermissionIds = 0;
        message.detachPermissionIds = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateRoleParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRoleParams): UpdateRoleParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 attach_permission_ids */ 3:
                    message.attachPermissionIds = reader.int32();
                    break;
                case /* int32 detach_permission_ids */ 4:
                    message.detachPermissionIds = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRoleParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 attach_permission_ids = 3; */
        if (message.attachPermissionIds !== 0)
            writer.tag(3, WireType.Varint).int32(message.attachPermissionIds);
        /* int32 detach_permission_ids = 4; */
        if (message.detachPermissionIds !== 0)
            writer.tag(4, WireType.Varint).int32(message.detachPermissionIds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.UpdateRoleParams
 */
export const UpdateRoleParams = new UpdateRoleParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleParams$Type extends MessageType<DeleteRoleParams> {
    constructor() {
        super("space.DeleteRoleParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleParams>): DeleteRoleParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleParams): DeleteRoleParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRoleParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.DeleteRoleParams
 */
export const DeleteRoleParams = new DeleteRoleParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRoleResponse$Type extends MessageType<DeleteRoleResponse> {
    constructor() {
        super("space.DeleteRoleResponse", [
            { no: 1, name: "attached_employees", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRoleResponse>): DeleteRoleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attachedEmployees = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteRoleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRoleResponse): DeleteRoleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 attached_employees */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.attachedEmployees.push(reader.int32());
                    else
                        message.attachedEmployees.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRoleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 attached_employees = 1; */
        if (message.attachedEmployees.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.attachedEmployees.length; i++)
                writer.int32(message.attachedEmployees[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.DeleteRoleResponse
 */
export const DeleteRoleResponse = new DeleteRoleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleRoleToEmployeesParams$Type extends MessageType<ToggleRoleToEmployeesParams> {
    constructor() {
        super("space.ToggleRoleToEmployeesParams", [
            { no: 1, name: "role_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "employee_id", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleRoleToEmployeesParams>): ToggleRoleToEmployeesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = 0;
        message.employeeId = [];
        if (value !== undefined)
            reflectionMergePartial<ToggleRoleToEmployeesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleRoleToEmployeesParams): ToggleRoleToEmployeesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 role_id */ 1:
                    message.roleId = reader.int32();
                    break;
                case /* repeated int32 employee_id */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.employeeId.push(reader.int32());
                    else
                        message.employeeId.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleRoleToEmployeesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 role_id = 1; */
        if (message.roleId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roleId);
        /* repeated int32 employee_id = 2; */
        if (message.employeeId.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.employeeId.length; i++)
                writer.int32(message.employeeId[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message space.ToggleRoleToEmployeesParams
 */
export const ToggleRoleToEmployeesParams = new ToggleRoleToEmployeesParams$Type();
