// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "assistant/assistant.proto" (package "assistant", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message assistant.GetSuggestedTagsByTextParams
 */
export interface GetSuggestedTagsByTextParams {
    /**
     * @generated from protobuf field: string text = 1
     */
    text: string;
}
/**
 * @generated from protobuf message assistant.GetSuggestedTagsByTextResponse
 */
export interface GetSuggestedTagsByTextResponse {
    /**
     * @generated from protobuf field: repeated int32 tags = 1
     */
    tags: number[];
}
/**
 * @generated from protobuf message assistant.GenerateContentByTextParams
 */
export interface GenerateContentByTextParams {
    /**
     * @generated from protobuf field: string text = 1
     */
    text: string;
}
/**
 * @generated from protobuf message assistant.GenerateContentByTextResponse
 */
export interface GenerateContentByTextResponse {
    /**
     * @generated from protobuf field: string text = 1
     */
    text: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSuggestedTagsByTextParams$Type extends MessageType<GetSuggestedTagsByTextParams> {
    constructor() {
        super("assistant.GetSuggestedTagsByTextParams", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSuggestedTagsByTextParams>): GetSuggestedTagsByTextParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<GetSuggestedTagsByTextParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSuggestedTagsByTextParams): GetSuggestedTagsByTextParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSuggestedTagsByTextParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.GetSuggestedTagsByTextParams
 */
export const GetSuggestedTagsByTextParams = new GetSuggestedTagsByTextParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSuggestedTagsByTextResponse$Type extends MessageType<GetSuggestedTagsByTextResponse> {
    constructor() {
        super("assistant.GetSuggestedTagsByTextResponse", [
            { no: 1, name: "tags", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSuggestedTagsByTextResponse>): GetSuggestedTagsByTextResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tags = [];
        if (value !== undefined)
            reflectionMergePartial<GetSuggestedTagsByTextResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSuggestedTagsByTextResponse): GetSuggestedTagsByTextResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 tags */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tags.push(reader.int32());
                    else
                        message.tags.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSuggestedTagsByTextResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 tags = 1; */
        if (message.tags.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tags.length; i++)
                writer.int32(message.tags[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.GetSuggestedTagsByTextResponse
 */
export const GetSuggestedTagsByTextResponse = new GetSuggestedTagsByTextResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateContentByTextParams$Type extends MessageType<GenerateContentByTextParams> {
    constructor() {
        super("assistant.GenerateContentByTextParams", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateContentByTextParams>): GenerateContentByTextParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateContentByTextParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateContentByTextParams): GenerateContentByTextParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateContentByTextParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.GenerateContentByTextParams
 */
export const GenerateContentByTextParams = new GenerateContentByTextParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateContentByTextResponse$Type extends MessageType<GenerateContentByTextResponse> {
    constructor() {
        super("assistant.GenerateContentByTextResponse", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateContentByTextResponse>): GenerateContentByTextResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateContentByTextResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateContentByTextResponse): GenerateContentByTextResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateContentByTextResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assistant.GenerateContentByTextResponse
 */
export const GenerateContentByTextResponse = new GenerateContentByTextResponse$Type();
/**
 * @generated ServiceType for protobuf service assistant.Assistant
 */
export const Assistant = new ServiceType("assistant.Assistant", [
    { name: "GetSuggestedTagsByText", options: {}, I: GetSuggestedTagsByTextParams, O: GetSuggestedTagsByTextResponse },
    { name: "GenerateContentByText", options: {}, I: GenerateContentByTextParams, O: GenerateContentByTextResponse }
]);
